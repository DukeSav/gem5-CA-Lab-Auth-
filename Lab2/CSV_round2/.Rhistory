pass=benchmark[aux1,c(1:7)]
# We will print the absolute frequencies per Parameter
#for the pass ones and select manually afterwards.
#Set the labels for each plot line
parameters=c("Instruction Cache Size", "Data Cache Size",
"L2 Cache Size", "Instruction Cache Associativity",
"Data Cache Associativity", "L2 Cache Associativity",
"Block Size")
titles=c("I_size", "D_size", "L2_size", "I_assoc", "D_assoc", "L2_assoc",
"Block_Size")
x_label=c("Cache Size", "Cache Associativity", "Block Size")
dir.create(name)
setwd(name)
for (i in seq(7)){
absfreq=data.frame(table(pass[,i]))
png(sprintf("Total_Round2_%s.png",titles[i]), width=3.5, height=3.25,
units="in", res=1200)
ylim <- c(0, 1.3*max(absfreq$Freq))
xx <- barplot(absfreq$Freq, xaxt = 'n', xlab = x_label[(i-1)%/%3 +1], width = 0.85,
ylim = ylim, main =parameters[i],
ylab = "Frequency", las=1, border='black')
text(x = xx, y =absfreq$Freq, label = absfreq$Freq, pos = 3, cex = 0.8,
col = "red")
axis(1, at=xx, labels=absfreq$Var1, tick=FALSE,
las=1, line=-0.5, cex.axis=0.8)
dev.off()
}
for (j in seq(7)){
absfreq=data.frame(table(best[,j]))
png(sprintf("Best_Round2_%s.png",titles[j]), width=3.5, height=3.25,
units="in", res=1200)
ylim <- c(0, 1.3*max(absfreq$Freq))
xx <- barplot(absfreq$Freq, xaxt = 'n', xlab = x_label[(j-1)%/%3 +1], width = 0.85,
ylim = ylim, main =parameters[j],
ylab = "Frequency", las=1, border='black')
text(x = xx, y =absfreq$Freq, label = absfreq$Freq, pos = 3, cex = 0.8,
col = "red")
axis(1, at=xx, labels=absfreq$Var1, tick=FALSE,
las=1, line=-0.5, cex.axis=0.8)
dev.off()
}
setwd("..")
#Select the Becnchmark by loading its values
benchmark=mcf_2
name="mcf"
#Calculate the 0% and 25% quartiles which are of interest,
#based on CPI.
tmp=quantile(benchmark[,9])
zero_quartile=tmp[1]
first_quartile=tmp[2]
aux1 = which(benchmark[,9] < first_quartile)
aux2 = which(benchmark[,9] == zero_quartile)
#best is the configurations with th e minimum CPI
best=benchmark[aux2,c(1:7)]
#passed is the configurations with CPI in the 1st quartile
pass=benchmark[aux1,c(1:7)]
# We will print the absolute frequencies per Parameter
#for the pass ones and select manually afterwards.
#Set the labels for each plot line
parameters=c("Instruction Cache Size", "Data Cache Size",
"L2 Cache Size", "Instruction Cache Associativity",
"Data Cache Associativity", "L2 Cache Associativity",
"Block Size")
titles=c("I_size", "D_size", "L2_size", "I_assoc", "D_assoc", "L2_assoc",
"Block_Size")
x_label=c("Cache Size", "Cache Associativity", "Block Size")
dir.create(name)
setwd(name)
for (i in seq(7)){
absfreq=data.frame(table(pass[,i]))
png(sprintf("Total_Round2_%s.png",titles[i]), width=3.5, height=3.25,
units="in", res=1200)
ylim <- c(0, 1.3*max(absfreq$Freq))
xx <- barplot(absfreq$Freq, xaxt = 'n', xlab = x_label[(i-1)%/%3 +1], width = 0.85,
ylim = ylim, main =parameters[i],
ylab = "Frequency", las=1, border='black')
text(x = xx, y =absfreq$Freq, label = absfreq$Freq, pos = 3, cex = 0.8,
col = "red")
axis(1, at=xx, labels=absfreq$Var1, tick=FALSE,
las=1, line=-0.5, cex.axis=0.8)
dev.off()
}
for (j in seq(7)){
absfreq=data.frame(table(best[,j]))
png(sprintf("Best_Round2_%s.png",titles[j]), width=3.5, height=3.25,
units="in", res=1200)
ylim <- c(0, 1.3*max(absfreq$Freq))
xx <- barplot(absfreq$Freq, xaxt = 'n', xlab = x_label[(j-1)%/%3 +1], width = 0.85,
ylim = ylim, main =parameters[j],
ylab = "Frequency", las=1, border='black')
text(x = xx, y =absfreq$Freq, label = absfreq$Freq, pos = 3, cex = 0.8,
col = "red")
axis(1, at=xx, labels=absfreq$Var1, tick=FALSE,
las=1, line=-0.5, cex.axis=0.8)
dev.off()
}
setwd("..")
#Select the Becnchmark by loading its values
benchmark=sjeng_2
name="mcf"
#Calculate the 0% and 25% quartiles which are of interest,
#based on CPI.
tmp=quantile(benchmark[,9])
zero_quartile=tmp[1]
first_quartile=tmp[2]
aux1 = which(benchmark[,9] < first_quartile)
aux2 = which(benchmark[,9] == zero_quartile)
#best is the configurations with th e minimum CPI
best=benchmark[aux2,c(1:7)]
#passed is the configurations with CPI in the 1st quartile
pass=benchmark[aux1,c(1:7)]
# We will print the absolute frequencies per Parameter
#for the pass ones and select manually afterwards.
#Set the labels for each plot line
parameters=c("Instruction Cache Size", "Data Cache Size",
"L2 Cache Size", "Instruction Cache Associativity",
"Data Cache Associativity", "L2 Cache Associativity",
"Block Size")
titles=c("I_size", "D_size", "L2_size", "I_assoc", "D_assoc", "L2_assoc",
"Block_Size")
x_label=c("Cache Size", "Cache Associativity", "Block Size")
dir.create(name)
setwd(name)
for (i in seq(7)){
absfreq=data.frame(table(pass[,i]))
png(sprintf("Total_Round2_%s.png",titles[i]), width=3.5, height=3.25,
units="in", res=1200)
ylim <- c(0, 1.3*max(absfreq$Freq))
xx <- barplot(absfreq$Freq, xaxt = 'n', xlab = x_label[(i-1)%/%3 +1], width = 0.85,
ylim = ylim, main =parameters[i],
ylab = "Frequency", las=1, border='black')
text(x = xx, y =absfreq$Freq, label = absfreq$Freq, pos = 3, cex = 0.8,
col = "red")
axis(1, at=xx, labels=absfreq$Var1, tick=FALSE,
las=1, line=-0.5, cex.axis=0.8)
dev.off()
}
for (j in seq(7)){
absfreq=data.frame(table(best[,j]))
png(sprintf("Best_Round2_%s.png",titles[j]), width=3.5, height=3.25,
units="in", res=1200)
ylim <- c(0, 1.3*max(absfreq$Freq))
xx <- barplot(absfreq$Freq, xaxt = 'n', xlab = x_label[(j-1)%/%3 +1], width = 0.85,
ylim = ylim, main =parameters[j],
ylab = "Frequency", las=1, border='black')
text(x = xx, y =absfreq$Freq, label = absfreq$Freq, pos = 3, cex = 0.8,
col = "red")
axis(1, at=xx, labels=absfreq$Var1, tick=FALSE,
las=1, line=-0.5, cex.axis=0.8)
dev.off()
}
setwd("..")
#Select the Becnchmark by loading its values
benchmark=mcf_2
name="mcf"
#Calculate the 0% and 25% quartiles which are of interest,
#based on CPI.
tmp=quantile(benchmark[,9])
zero_quartile=tmp[1]
first_quartile=tmp[2]
aux1 = which(benchmark[,9] < first_quartile)
aux2 = which(benchmark[,9] == zero_quartile)
#best is the configurations with th e minimum CPI
best=benchmark[aux2,c(1:7)]
#passed is the configurations with CPI in the 1st quartile
pass=benchmark[aux1,c(1:7)]
# We will print the absolute frequencies per Parameter
#for the pass ones and select manually afterwards.
#Set the labels for each plot line
parameters=c("Instruction Cache Size", "Data Cache Size",
"L2 Cache Size", "Instruction Cache Associativity",
"Data Cache Associativity", "L2 Cache Associativity",
"Block Size")
titles=c("I_size", "D_size", "L2_size", "I_assoc", "D_assoc", "L2_assoc",
"Block_Size")
x_label=c("Cache Size", "Cache Associativity", "Block Size")
dir.create(name)
setwd(name)
for (i in seq(7)){
absfreq=data.frame(table(pass[,i]))
png(sprintf("Total_Round2_%s.png",titles[i]), width=3.5, height=3.25,
units="in", res=1200)
ylim <- c(0, 1.3*max(absfreq$Freq))
xx <- barplot(absfreq$Freq, xaxt = 'n', xlab = x_label[(i-1)%/%3 +1], width = 0.85,
ylim = ylim, main =parameters[i],
ylab = "Frequency", las=1, border='black')
text(x = xx, y =absfreq$Freq, label = absfreq$Freq, pos = 3, cex = 0.8,
col = "red")
axis(1, at=xx, labels=absfreq$Var1, tick=FALSE,
las=1, line=-0.5, cex.axis=0.8)
dev.off()
}
for (j in seq(7)){
absfreq=data.frame(table(best[,j]))
png(sprintf("Best_Round2_%s.png",titles[j]), width=3.5, height=3.25,
units="in", res=1200)
ylim <- c(0, 1.3*max(absfreq$Freq))
xx <- barplot(absfreq$Freq, xaxt = 'n', xlab = x_label[(j-1)%/%3 +1], width = 0.85,
ylim = ylim, main =parameters[j],
ylab = "Frequency", las=1, border='black')
text(x = xx, y =absfreq$Freq, label = absfreq$Freq, pos = 3, cex = 0.8,
col = "red")
axis(1, at=xx, labels=absfreq$Var1, tick=FALSE,
las=1, line=-0.5, cex.axis=0.8)
dev.off()
}
setwd("..")
#Select the Becnchmark by loading its values
benchmark=sjeng_2
name="sjeng"
#Calculate the 0% and 25% quartiles which are of interest,
#based on CPI.
tmp=quantile(benchmark[,9])
zero_quartile=tmp[1]
first_quartile=tmp[2]
aux1 = which(benchmark[,9] < first_quartile)
aux2 = which(benchmark[,9] == zero_quartile)
#best is the configurations with th e minimum CPI
best=benchmark[aux2,c(1:7)]
#passed is the configurations with CPI in the 1st quartile
pass=benchmark[aux1,c(1:7)]
# We will print the absolute frequencies per Parameter
#for the pass ones and select manually afterwards.
#Set the labels for each plot line
parameters=c("Instruction Cache Size", "Data Cache Size",
"L2 Cache Size", "Instruction Cache Associativity",
"Data Cache Associativity", "L2 Cache Associativity",
"Block Size")
titles=c("I_size", "D_size", "L2_size", "I_assoc", "D_assoc", "L2_assoc",
"Block_Size")
x_label=c("Cache Size", "Cache Associativity", "Block Size")
dir.create(name)
setwd(name)
for (i in seq(7)){
absfreq=data.frame(table(pass[,i]))
png(sprintf("Total_Round2_%s.png",titles[i]), width=3.5, height=3.25,
units="in", res=1200)
ylim <- c(0, 1.3*max(absfreq$Freq))
xx <- barplot(absfreq$Freq, xaxt = 'n', xlab = x_label[(i-1)%/%3 +1], width = 0.85,
ylim = ylim, main =parameters[i],
ylab = "Frequency", las=1, border='black')
text(x = xx, y =absfreq$Freq, label = absfreq$Freq, pos = 3, cex = 0.8,
col = "red")
axis(1, at=xx, labels=absfreq$Var1, tick=FALSE,
las=1, line=-0.5, cex.axis=0.8)
dev.off()
}
for (j in seq(7)){
absfreq=data.frame(table(best[,j]))
png(sprintf("Best_Round2_%s.png",titles[j]), width=3.5, height=3.25,
units="in", res=1200)
ylim <- c(0, 1.3*max(absfreq$Freq))
xx <- barplot(absfreq$Freq, xaxt = 'n', xlab = x_label[(j-1)%/%3 +1], width = 0.85,
ylim = ylim, main =parameters[j],
ylab = "Frequency", las=1, border='black')
text(x = xx, y =absfreq$Freq, label = absfreq$Freq, pos = 3, cex = 0.8,
col = "red")
axis(1, at=xx, labels=absfreq$Var1, tick=FALSE,
las=1, line=-0.5, cex.axis=0.8)
dev.off()
}
setwd("..")
#Select the Becnchmark by loading its values
benchmark=libm_2
name="libm"
#Calculate the 0% and 25% quartiles which are of interest,
#based on CPI.
tmp=quantile(benchmark[,9])
zero_quartile=tmp[1]
first_quartile=tmp[2]
aux1 = which(benchmark[,9] < first_quartile)
aux2 = which(benchmark[,9] == zero_quartile)
#best is the configurations with th e minimum CPI
best=benchmark[aux2,c(1:7)]
#passed is the configurations with CPI in the 1st quartile
pass=benchmark[aux1,c(1:7)]
# We will print the absolute frequencies per Parameter
#for the pass ones and select manually afterwards.
#Set the labels for each plot line
parameters=c("Instruction Cache Size", "Data Cache Size",
"L2 Cache Size", "Instruction Cache Associativity",
"Data Cache Associativity", "L2 Cache Associativity",
"Block Size")
titles=c("I_size", "D_size", "L2_size", "I_assoc", "D_assoc", "L2_assoc",
"Block_Size")
x_label=c("Cache Size", "Cache Associativity", "Block Size")
dir.create(name)
setwd(name)
for (i in seq(7)){
absfreq=data.frame(table(pass[,i]))
png(sprintf("Total_Round2_%s.png",titles[i]), width=3.5, height=3.25,
units="in", res=1200)
ylim <- c(0, 1.3*max(absfreq$Freq))
xx <- barplot(absfreq$Freq, xaxt = 'n', xlab = x_label[(i-1)%/%3 +1], width = 0.85,
ylim = ylim, main =parameters[i],
ylab = "Frequency", las=1, border='black')
text(x = xx, y =absfreq$Freq, label = absfreq$Freq, pos = 3, cex = 0.8,
col = "red")
axis(1, at=xx, labels=absfreq$Var1, tick=FALSE,
las=1, line=-0.5, cex.axis=0.8)
dev.off()
}
for (j in seq(7)){
absfreq=data.frame(table(best[,j]))
png(sprintf("Best_Round2_%s.png",titles[j]), width=3.5, height=3.25,
units="in", res=1200)
ylim <- c(0, 1.3*max(absfreq$Freq))
xx <- barplot(absfreq$Freq, xaxt = 'n', xlab = x_label[(j-1)%/%3 +1], width = 0.85,
ylim = ylim, main =parameters[j],
ylab = "Frequency", las=1, border='black')
text(x = xx, y =absfreq$Freq, label = absfreq$Freq, pos = 3, cex = 0.8,
col = "red")
axis(1, at=xx, labels=absfreq$Var1, tick=FALSE,
las=1, line=-0.5, cex.axis=0.8)
dev.off()
}
setwd("..")
#Select the Becnchmark by loading its values
benchmark=bzip_2
name="bzip"
#Calculate the 0% and 25% quartiles which are of interest,
#based on CPI.
tmp=quantile(benchmark[,9])
zero_quartile=tmp[1]
first_quartile=tmp[2]
aux1 = which(benchmark[,9] < first_quartile)
aux2 = which(benchmark[,9] == zero_quartile)
#best is the configurations with th e minimum CPI
best=benchmark[aux2,c(1:7)]
#passed is the configurations with CPI in the 1st quartile
pass=benchmark[aux1,c(1:7)]
# We will print the absolute frequencies per Parameter
#for the pass ones and select manually afterwards.
#Set the labels for each plot line
parameters=c("Instruction Cache Size", "Data Cache Size",
"L2 Cache Size", "Instruction Cache Associativity",
"Data Cache Associativity", "L2 Cache Associativity",
"Block Size")
titles=c("I_size", "D_size", "L2_size", "I_assoc", "D_assoc", "L2_assoc",
"Block_Size")
x_label=c("Cache Size", "Cache Associativity", "Block Size")
dir.create(name)
setwd(name)
for (i in seq(7)){
absfreq=data.frame(table(pass[,i]))
png(sprintf("Total_Round2_%s.png",titles[i]), width=3.5, height=3.25,
units="in", res=1200)
ylim <- c(0, 1.3*max(absfreq$Freq))
xx <- barplot(absfreq$Freq, xaxt = 'n', xlab = x_label[(i-1)%/%3 +1], width = 0.85,
ylim = ylim, main =parameters[i],
ylab = "Frequency", las=1, border='black')
text(x = xx, y =absfreq$Freq, label = absfreq$Freq, pos = 3, cex = 0.8,
col = "red")
axis(1, at=xx, labels=absfreq$Var1, tick=FALSE,
las=1, line=-0.5, cex.axis=0.8)
dev.off()
}
for (j in seq(7)){
absfreq=data.frame(table(best[,j]))
png(sprintf("Best_Round2_%s.png",titles[j]), width=3.5, height=3.25,
units="in", res=1200)
ylim <- c(0, 1.3*max(absfreq$Freq))
xx <- barplot(absfreq$Freq, xaxt = 'n', xlab = x_label[(j-1)%/%3 +1], width = 0.85,
ylim = ylim, main =parameters[j],
ylab = "Frequency", las=1, border='black')
text(x = xx, y =absfreq$Freq, label = absfreq$Freq, pos = 3, cex = 0.8,
col = "red")
axis(1, at=xx, labels=absfreq$Var1, tick=FALSE,
las=1, line=-0.5, cex.axis=0.8)
dev.off()
}
setwd("..")
#Select the Becnchmark by loading its values
benchmark=hmmer_2
name="hmmer"
#Calculate the 0% and 25% quartiles which are of interest,
#based on CPI.
tmp=quantile(benchmark[,9])
zero_quartile=tmp[1]
first_quartile=tmp[2]
aux1 = which(benchmark[,9] < first_quartile)
aux2 = which(benchmark[,9] == zero_quartile)
#best is the configurations with th e minimum CPI
best=benchmark[aux2,c(1:7)]
#passed is the configurations with CPI in the 1st quartile
pass=benchmark[aux1,c(1:7)]
# We will print the absolute frequencies per Parameter
#for the pass ones and select manually afterwards.
#Set the labels for each plot line
parameters=c("Instruction Cache Size", "Data Cache Size",
"L2 Cache Size", "Instruction Cache Associativity",
"Data Cache Associativity", "L2 Cache Associativity",
"Block Size")
titles=c("I_size", "D_size", "L2_size", "I_assoc", "D_assoc", "L2_assoc",
"Block_Size")
x_label=c("Cache Size", "Cache Associativity", "Block Size")
dir.create(name)
setwd(name)
for (i in seq(7)){
absfreq=data.frame(table(pass[,i]))
png(sprintf("Total_Round2_%s.png",titles[i]), width=3.5, height=3.25,
units="in", res=1200)
ylim <- c(0, 1.3*max(absfreq$Freq))
xx <- barplot(absfreq$Freq, xaxt = 'n', xlab = x_label[(i-1)%/%3 +1], width = 0.85,
ylim = ylim, main =parameters[i],
ylab = "Frequency", las=1, border='black')
text(x = xx, y =absfreq$Freq, label = absfreq$Freq, pos = 3, cex = 0.8,
col = "red")
axis(1, at=xx, labels=absfreq$Var1, tick=FALSE,
las=1, line=-0.5, cex.axis=0.8)
dev.off()
}
for (j in seq(7)){
absfreq=data.frame(table(best[,j]))
png(sprintf("Best_Round2_%s.png",titles[j]), width=3.5, height=3.25,
units="in", res=1200)
ylim <- c(0, 1.3*max(absfreq$Freq))
xx <- barplot(absfreq$Freq, xaxt = 'n', xlab = x_label[(j-1)%/%3 +1], width = 0.85,
ylim = ylim, main =parameters[j],
ylab = "Frequency", las=1, border='black')
text(x = xx, y =absfreq$Freq, label = absfreq$Freq, pos = 3, cex = 0.8,
col = "red")
axis(1, at=xx, labels=absfreq$Var1, tick=FALSE,
las=1, line=-0.5, cex.axis=0.8)
dev.off()
}
setwd("..")
setwd("~/my_gem5/spec_results/Results/CSV_round1")
bzip_1_new=read.csv("bzip_1_new.csv", header=TRUE)
mcf_1_new=read.csv("mcf_1_new.csv", header=TRUE)
hmmer_1_new=read.csv("hmmer_1_new.csv", header=TRUE)
sjeng_1_new=read.csv("sjeng_1_new.csv", header=TRUE)
libm_1_new=read.csv("libm_1_new.csv", header=TRUE)
warnings()
bzip_1_new
bzip_tot=rbind(bzip_1_new, bzip_2)
bzip_tot=rbind(bzip_1_new, bzip_2)
mcf_tot=rbind(mcf_1_new,mcf_2)
hmmer_tot=rbind(hmmer_1_new,hmmer_2)
sjeng_tot=rbind(sjeng_1_new,sjeng_2)
libm_tot=rbind(libm_1_new, libm_2)
sjeng_1_new
libm_1_new
sjeng_1_new=read.csv("sjeng_1_new.csv", header=TRUE)
sjeng_tot=rbind(sjeng_1_new,sjeng_2)
libm_1_new=read.csv("libm_1_new.csv", header=TRUE)
libm_tot=rbind(libm_1_new, libm_2)
bzip_tot=unique(rbind(bzip_1_new, bzip_2))
mcf_tot=unique(rbind(mcf_1_new,mcf_2))
bzip_tot=unique(rbind(bzip_1_new, bzip_2))
mcf_tot=unique(rbind(mcf_1_new,mcf_2))
hmmer_tot=unique(rbind(hmmer_1_new,hmmer_2))
sjeng_tot=unique(rbind(sjeng_1_new,sjeng_2))
libm_tot=unique(rbind(libm_1_new, libm_2))
plot(bzip_tot$I_size, bzip_tot$CPI)
max(bzip_tot$I_size)
bzi_tot[which(bzip_tot$I_size=256)]
bzip_tot[which(bzip_tot$I_size=256)]
bzip_tot[which(bzip_tot$I_size=256),]
a=which(bzip_tot$I_size=256)
bzip_tot[which(bzip_tot$I_size==256),]
setwd("~/my_gem5/spec_results/Results/CSV_round2")
bzip_2=read.csv("res_bzip_2.csv", header=TRUE)
bzip_tot=unique(rbind(bzip_1_new, bzip_2))
plot(bzip_tot$I_size, bzip_tot$CPI)
plot(bzip_tot$I_size, bzip_tot$CPI, xlab=I_size)
plot(bzip_tot$I_size, bzip_tot$CPI, xlab="I_size")
plot(bzip_tot$I_size, bzip_tot$CPI, xlab="I_size", ylab="CPI",las=1)
plot(bzip_tot$I_size, bzip_tot$CPI, xlab="I_size", ylab="CPI",las=1,
ylim=c(0.8*min(bzip_tot$CPI), 1.2*max(bzip_tot$CPI)), pch=3)
benchmark=bzip_tot
tmp=quantile(benchmark[,9])
aux1 = which(benchmark[,9] <=tmp[2])
aux2 = which(benchmark[,9] <=tmp[3])
pass1=benchmark[aux1,c(1:8)]
pass2=benchmark[aux2,c(1:8)]
pass1
View(pass1)
benchmark[benchmark$I_size=8,]
benchmark[(benchmark$I_size=8),]
benchmark
benchmark[(benchmark$I_size=8),]
benchmark[(benchmark$I_size=128),]
benchmark[(benchmark$D_size=128),]
benchmark[(benchmark$D_size==128),]
I_conds=c((((benchmark$I_size==8)||(benchmark$I_size==16))&&(benchmark$I_assoc==2)),
(((benchmark$I_size==32)||(benchmark$I_size==64))&&(benchmark$I_assoc==4)),
(((benchmark$I_size==128)||(benchmark$I_size==128))&&(benchmark$I_assoc==4)))
benchmark[I_conds[1],]
benchmark
View(benchmark)
View(bzip_tot)
benchmark=bzip_tot
I_conds=c((((benchmark$I_size==8)||(benchmark$I_size==16))&&(benchmark$I_assoc==2)),
(((benchmark$I_size==32)||(benchmark$I_size==64))&&(benchmark$I_assoc==4)),
(((benchmark$I_size==128)||(benchmark$I_size==128))&&(benchmark$I_assoc==4)))
benchmark[I_conds[1],]
View(benchmark)
benchmark[I_conds[2],]
I_conds=c((((benchmark$I_size==8)|(benchmark$I_size==16))&(benchmark$I_assoc==2)),
(((benchmark$I_size==32)|(benchmark$I_size==64))&(benchmark$I_assoc==4)),
(((benchmark$I_size==128)|(benchmark$I_size==128))&(benchmark$I_assoc==4)))
benchmark[I_conds[2],]
View(benchmark)
benchmark[I_conds[1],]
x=rbind(benchmark[which(benchmark$I_size==16),],
benchmark[which(benchmark$I_size==8),])
View(benchmark)
View(x)
x=rbind(benchmark[which(benchmark$I_size==16 & benchmark$I_assoc==4),],
benchmark[which(benchmark$I_size==8 & benchmark$I_assoc==4),])
View(x)
