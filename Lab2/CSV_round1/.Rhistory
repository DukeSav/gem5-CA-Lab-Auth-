x=5
A=c(10,20,30,40)
A.24
A>23
geia
x=5
library (rpart)
library (rpart.plot)
model <- rpart(Target ~ ., method = "class", data = ..., minsplit =
..., minbucket = ..., cp = ...)
model <- rpart(Target ~ ., method = "class", data = ..., minsplit =..., minbucket = ..., cp = ...)
model <- rpart(Target ~ ., method = "class", data = ..., minsplit =..., minbucket = ..., cp=...)
model <- rpart(Target ~ ., method = "class", data = 1, minsplit =1, minbucket = 1, cp=1)
clear
clc
clear all
weather = read.csv("weather.txt")
weather = read.csv("weather.txt")
weather = read.csv("weather.txt")
w=read.csv("weather.txt")
getwd()
cd ../Desktop/HMMY STUFF
cd ../Desktop/HMMY\ STUFF
getwd()
w=read.csv("weather.txt")
ls
w=read.csv("weather.txt")
w
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
model <- rpart(Play ~ Outlook, method = "class", data = weather,
minsplit = 1)
model <- rpart(Play ~ Outlook, method = "class", data = w,
minsplit = 1)
rpart.plot(model, extra = 104, nn = TRUE)
absfreq=table(weather[, c(1,4)])
weather=w
absfreq=table(weather[, c(1,4)])
absfreq
c(1,4)
weather
freq=prop.table(absfreq,1)
freq
freqSum=rowSums(prop.table(absfreq))
freqSum
freq
prop.table((absfreq))
prop.table((absfreq))
prop.table((absfreq))
absfreq
x=prop.table((absfreq))
x
rowSums(x)
y=rowSums(x)
y
y["Sunny"]
freq
Gini_sunny=1-freq["No","Sunny"]^2
Gini_sunny=1-freq["Sunny","No"]^2-freq["Sunny","Yes"]
Gini_sunny
Gini_sunny=1-freq["Sunny","No"]^2-freq["Sunny","Yes"]^2
Gini_sunny
rm(list=ls())
setwd("...")
wd()
wd
pwd
getwd()
w=read.csv("weather.txt")
absolutefrequency=table(w[c(1,4)])
absolutefrequency
prop.table(absolutefrequency,1)
prop.table(absolutefrequency,2)
prop.table(absolutefrequency,3)
prop.table(absolutefrequency,1)
x=prop.table(absolutefrequency,1)
x
rowSums(x)
prop.table(absolutefrequency)
prop.table(absolutefrequency,1)
xx=prop.table(absolutefrequency,1)
xx
rowSums(xx)
xx=prop.table(absolutefrequency)
xx
rowSums(xx)
rm
rm(list=ls())
weather=read.csv("weather.txt")
table(weather[c(2,4)])
x=table(weather[c(2,4)])
x
xx=prop.table(x,1)
xx
xxx=prop.table(x)
xxx
prob=rowSums(xxx)
prob
Gini_hot=1-xx["Hot","Yes"]^2-xx["Hot","No"]^2
Gini_hot
Gini_cold=1-xx["Cold","Yes"]^2-xx["Cold","No"]^2
Gini_cold=1-xx["Cool","Yes"]^2-xx["Cool","No"]^2
Gini_cold
Gini_temp=prob["Hot"]*Gini_hot+prob["Cool"]*Gini_cold
Gini_temp
Gini_temo
Gini_temp
prob["Hot"]*Gini_hot
prob["Cool"]*Gini_cold
Gini_temp
GINI_Hot = 1 - freq["Hot", "No"]^2 - freq["Hot", "Yes"]^2
GINI_Cool = 1 - freq["Cool", "No"]^2 - freq["Cool", "Yes"]^2
GINI_Temperature = freqSum["Hot"] * GINI_Hot + freqSum["Cool"] * GINI_Cool
GINI_Hot = 1 - freq["Hot", "No"]^2 - freq["Hot", "Yes"]^2
absfreq = table(weather[, c(2, 4)])
freq = prop.table(absfreq, 1)
freqSum = rowSums(prop.table(absfreq))
absfreq
freq
freqSum
GINI_Hot = 1 - freq["Hot", "No"]^2 - freq["Hot", "Yes"]^2
Gini_Hot
GINI_Hot
prob
freq
xx
Majik=1-xx["Hot","Yes"]^2-xx["Hot","Yes"]^2
Majik
Majik=1-xx["Hot","Yes"]^2-xx["Hot","No"]^2
Majik
Majik=1-xx["Cool","Yes"]^2-xx["Cool","No"]^2
Majik
1-0.4897959-0.244898
1-0.1428571^2-0.8571429^2
1-0.5714286^2-0.4285714^2
Gini_temp=0.5*(0.4897959+0.244898)
Gini_temp
table(weather[, c(4)])
freq = prop.table(table(weather[, c(4)]))
freq
Total_Entropy=freq["Yes"]*log2(freq["Yes"])+freq["No"]*log2(freq["No"])
Total_Entropy
Total_Entropy=-freq["Yes"]*log2(freq["Yes"])-freq["No"]*log2(freq["No"])
Total_Entropy
Entropy_All = - freq["No"] * log2(freq["No"]) - freq["Yes"] * log2(freq["Yes"])
Entropy_All
absfreq = table(weather[, c(1, 4)])
freq = prop.table(absfreq, 1)
freqSum = rowSums(prop.table(absfreq))
freq
Entropy_Sunny = - freq["Sunny", "No"] * log2(freq["Sunny", "No"]) - freq["Sunny", "Yes"] * log2(freq["Sunny", "Yes"])
Entropy_Sunny
model <- rpart(Play ~ Outlook + Temperature + Humidity, method = "class", data=weather, minsplit=1,minbucket=1,cp=-1)
rpart.plot(model,extra=104, nn=TRUE)
model <- rpart(Play ~ Temperature + Outlook + Humidity, method = "class", data=weather, minsplit=1,minbucket=1,cp=-1)
rpart.plot(model,extra=104, nn=TRUE)
model <- rpart(Play ~ Temperature + Outlook + Humidity, method = "class", data=weather, minsplit=1,minbucket=1,cp=-1, maxdepth=2)
rpart.plot(model,extra=104, nn=TRUE)
model <- rpart(Play ~ Temperature + Outlook + Humidity, method = "class", data=weather, minsplit=1,minbucket=1,cp=-1)
rpart.plot(model,extra=104, nn=TRUE)
iris2 = iris[, c(1, 2, 5)]
library(rpart.plot)
rm(list=ls())
# Import decision tree libraries
library(rpart)
library(rpart.plot)
# Load iris dataset
iris2 = iris[, c(1, 2, 5)]
iris2$Species[c(101:150)] = iris2$Species[c(21:70)]
iris2$Species = factor(iris2$Species)
# Split to training and testing data
trainingdata = iris2[c(1:40, 51:90, 101:140),]
testdata = iris2[c(41:50, 91:100, 141:150),]
rownames(trainingdata) <- NULL
rownames(testdata) <- NULL
# Train a decision tree model and plot it
# model <- rpart(Species ~ ., method = "class", data = trainingdata, minsplit = 10)
model <- rpart(Species ~ ., method = "class", data = trainingdata, minsplit = 20)
# model <- rpart(Species ~ ., method = "class", data = trainingdata, minsplit = 30)
rpart.plot(model, extra = 104, nn = TRUE)
# Apply the model to the test data
xtest = testdata[,1:2]
ytest = testdata[,3]
pred = predict(model, xtest, type="class")
# Create confusion matrix and compute metrics
cm = as.matrix(table(Actual = ytest, Predicted = pred))
accuracy = sum(diag(cm)) / sum(cm)
precision = diag(cm) / colSums(cm)
recall = diag(cm) / rowSums(cm)
f1 = 2 * precision * recall / (precision + recall)
data.frame(precision, recall, f1)
iris2 = iris[, c(1, 2, 5)]
iris2$Species[c(101:150)] = iris2$Species[c(21:70)]
iris2$Species = factor(iris2$Species)
iris2$Species
iris4=iris[, c(1,2,5)]]
iris4=iris[, c(1,2,5)]
iris4$Species
iris4$Species=factor(iris4$Species)
iris4$Species
model1 <- rpart(Species ~ ., method = "class", data = trainingdata, minsplit = 20)
rpart.plot(model1,extra=104, nn=TRUE)
iris2
model <- rpart(Play ~ Temperature+Humidity+Outlook, data=weather[c(1:2, 4:6, 9:10),])
weather=read.csv("weather.txt")
model <- rpart(Play ~ Temperature+Humidity+Outlook, data=weather[c(1:2, 4:6, 9:10),])
rpart.plot(model, extra=104,nn=TRUE)
weather[c(1:2, 4:6, 9:10),]
model <- rpart(Play ~ Temperature+Humidity+Outlook, data=weather)
rpart.plot(model, extra=104,nn=TRUE)
model <- rpart(Play ~ Temperature+Humidity+Outlook, data=weather,minsplit = 1)
rpart.plot(model, extra=104,nn=TRUE)
X1=c(2,2,-2,-2,1,1,-1,-1)
X2=c(2,-2,2,-2,1,-1,1,-1)
Y=c(1,1,1,1,2,2,2,2)
alldata=data.frame(X1,X2,Y)
library(MLmetrics)
library(e1071)
trainingdata=alldata[,c("X1","X2")]
View(trainingdata)
View(trainingdata)
trainingdata=alldata[,c("X1","X2","Y")]
View(trainingdata)
plot(trainingdata[, c(1:2)], col = trainingdata$y,pch = c("o","+")[trainingdata$y])
plot(trainingdata[, c(1:2)], col = trainingdata$y,pch = c("o","+")[trainingdata$Y])
View(trainingdata)
plot(trainingdata[, c(1:2)], col = trainingdata$Υ,pch = c("o","+")[trainingdata$Y])
plot(trainingdata[, c(1:2)], col = trainingdata$Υ,pch = c("o","+")[trainingdata$Y])
trainingdata[,c(1:2)]
col=trainingdata$Y
col
pch=c("o","+")[trainingdata$Y]
pch
plot(trainingdata[,c(1:2)],col,pch)
plot(trainingdata[,c(1:2)],col,pch)
plot(trainingdata[,c(1:2)])
plot(trainingdata[,c(1:2)],col)
plot(trainingdata[,c(1:2)],col=col)
plot(trainingdata[,c(1:2)],col=col,pch=pch)
axis1=seq(min(trainingdata[,1]), max(trainingdata[,1]),by=0.1)
axis2=seq(min(trainingdata[,2]), max(trainingdata[,2]),by=0.1)
gridaki=expand.grid(axis1,axis2)
colnames(gridaki)=colnames(trainingdata)[1:2]
plot(gridaki)
model=svm(Y~X1+X2,kernel='radial',type="C-classification",gamma=1, data=trainingdata)
pred=predict(model,gridaki)
YYY=matrix(pred, length(axis1), length(axis2))
contour(axis1, axis2, YYY, add = TRUE, levels = 1.5, labels = "gamma = 1",
col = "blue")
contour(axis1, axis2, YYY, add = TRUE, levels = 1.5, labels = "gamma = 1",
col = "blue")
YYY
setwd("~/my_gem5/spec_results/Results/CSV_round1")
bzip=read.csv("bzip.csv", header=TRUE)
mcf=read.csv("mcf.csv", header=TRUE)
hmmer=read.csv("hmmer.csv", header=TRUE)
sjeng=read.csv("sjeng.csv", header=TRUE)
libm=read.csv("libm.csv", header=TRUE)
#Bzip Analysis
tmp=quantile(bzip[,7])
zero_quartile=tmp[1]
first_quartile=tmp[2]
aux1 = which(bzip[,7] < first_quartile)
aux2 = which(bzip[,7] == zero_quartile)
passed=bzip[aux1,c(1:6)]
best=bzip[aux2,c(1:6)]
absfreq=table(passed[,2])
relfreq=absfreq/sum(absfreq)
hist(passed$I_size, col = "aquamarine2", border="blue3",
freq=TRUE, xlab="Instruction Cache Size", main="Instruction Cache Size",
xlim=c(0,72), add=TRUE, ann=TRUE)
passed$I_size
plot(passed$I_size)
barplot(passed$I_size)
barplot(passed$I_size, horiz=TRUE, names.arg = c("8 kB", "16 kB", "32 kB", "64 kB"))
barplot(passed$I_size, horiz=TRUE)
barplot(passed$I_size, horiz=TRUE)
passed
table(passed$I_size)
counts <- table(passed$I_size)
barplot(counts, main="I size")
barplot(counts, main="I size", horiz=TRUE)
barplot(counts, main="I size", horiz=TRUE, names.arg=(c("8","16","32","64")))
barplot(counts, main="I size", horiz=TRUE, col="darkred", names.arg=(c("8","16","32","64")))
barplot(counts, main="I size", col="blue",border="red", density=10)
counts
counts=counts/sum(counts)
barplot(counts, main="I size", col="blue",border="red", density=10)
barplot(counts, main="I size", col="blue",border="red", density=100)
barplot(counts, main="I size", col="blue",border="red", density=50)
barplot(counts, main="I size", col="blue",border="red", density=40)
barplot(counts, main="I size", col="blue",border="red", density=20)
barplot(counts, main="I size", col="blue",border="red", density=30)
